// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: hours_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HoursServiceClient is the client API for HoursService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HoursServiceClient interface {
	CreateCourse(ctx context.Context, in *CreateCourseRequest, opts ...grpc.CallOption) (*CreateCourseResponse, error)
	UpdateCourse(ctx context.Context, in *UpdateCourseRequest, opts ...grpc.CallOption) (*UpdateCourseResponse, error)
	DeleteCourse(ctx context.Context, in *DeleteCourseRequest, opts ...grpc.CallOption) (*DeleteCourseResponse, error)
	ArchiveCourse(ctx context.Context, in *ArchiveCourseRequest, opts ...grpc.CallOption) (*ArchiveCourseResponse, error)
	ArchiveCoursesByTerm(ctx context.Context, in *ArchiveCoursesByTermRequest, opts ...grpc.CallOption) (*ArchiveCoursesByTermResponse, error)
	// Look up a queue by id.
	GetQueue(ctx context.Context, in *GetQueueRequest, opts ...grpc.CallOption) (*GetQueueResponse, error)
	// Create a queue.
	CreateQueue(ctx context.Context, in *CreateQueueRequest, opts ...grpc.CallOption) (*CreateQueueResponse, error)
	// Update an existing queue.
	UpdateQueue(ctx context.Context, in *UpdateQueueRequest, opts ...grpc.CallOption) (*UpdateQueueResponse, error)
	// Delete a queue permanently.
	DeleteQueue(ctx context.Context, in *DeleteQueueRequest, opts ...grpc.CallOption) (*DeleteQueueResponse, error)
}

type hoursServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHoursServiceClient(cc grpc.ClientConnInterface) HoursServiceClient {
	return &hoursServiceClient{cc}
}

func (c *hoursServiceClient) CreateCourse(ctx context.Context, in *CreateCourseRequest, opts ...grpc.CallOption) (*CreateCourseResponse, error) {
	out := new(CreateCourseResponse)
	err := c.cc.Invoke(ctx, "/hours.HoursService/CreateCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hoursServiceClient) UpdateCourse(ctx context.Context, in *UpdateCourseRequest, opts ...grpc.CallOption) (*UpdateCourseResponse, error) {
	out := new(UpdateCourseResponse)
	err := c.cc.Invoke(ctx, "/hours.HoursService/UpdateCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hoursServiceClient) DeleteCourse(ctx context.Context, in *DeleteCourseRequest, opts ...grpc.CallOption) (*DeleteCourseResponse, error) {
	out := new(DeleteCourseResponse)
	err := c.cc.Invoke(ctx, "/hours.HoursService/DeleteCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hoursServiceClient) ArchiveCourse(ctx context.Context, in *ArchiveCourseRequest, opts ...grpc.CallOption) (*ArchiveCourseResponse, error) {
	out := new(ArchiveCourseResponse)
	err := c.cc.Invoke(ctx, "/hours.HoursService/ArchiveCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hoursServiceClient) ArchiveCoursesByTerm(ctx context.Context, in *ArchiveCoursesByTermRequest, opts ...grpc.CallOption) (*ArchiveCoursesByTermResponse, error) {
	out := new(ArchiveCoursesByTermResponse)
	err := c.cc.Invoke(ctx, "/hours.HoursService/ArchiveCoursesByTerm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hoursServiceClient) GetQueue(ctx context.Context, in *GetQueueRequest, opts ...grpc.CallOption) (*GetQueueResponse, error) {
	out := new(GetQueueResponse)
	err := c.cc.Invoke(ctx, "/hours.HoursService/GetQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hoursServiceClient) CreateQueue(ctx context.Context, in *CreateQueueRequest, opts ...grpc.CallOption) (*CreateQueueResponse, error) {
	out := new(CreateQueueResponse)
	err := c.cc.Invoke(ctx, "/hours.HoursService/CreateQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hoursServiceClient) UpdateQueue(ctx context.Context, in *UpdateQueueRequest, opts ...grpc.CallOption) (*UpdateQueueResponse, error) {
	out := new(UpdateQueueResponse)
	err := c.cc.Invoke(ctx, "/hours.HoursService/UpdateQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hoursServiceClient) DeleteQueue(ctx context.Context, in *DeleteQueueRequest, opts ...grpc.CallOption) (*DeleteQueueResponse, error) {
	out := new(DeleteQueueResponse)
	err := c.cc.Invoke(ctx, "/hours.HoursService/DeleteQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HoursServiceServer is the server API for HoursService service.
// All implementations must embed UnimplementedHoursServiceServer
// for forward compatibility
type HoursServiceServer interface {
	CreateCourse(context.Context, *CreateCourseRequest) (*CreateCourseResponse, error)
	UpdateCourse(context.Context, *UpdateCourseRequest) (*UpdateCourseResponse, error)
	DeleteCourse(context.Context, *DeleteCourseRequest) (*DeleteCourseResponse, error)
	ArchiveCourse(context.Context, *ArchiveCourseRequest) (*ArchiveCourseResponse, error)
	ArchiveCoursesByTerm(context.Context, *ArchiveCoursesByTermRequest) (*ArchiveCoursesByTermResponse, error)
	// Look up a queue by id.
	GetQueue(context.Context, *GetQueueRequest) (*GetQueueResponse, error)
	// Create a queue.
	CreateQueue(context.Context, *CreateQueueRequest) (*CreateQueueResponse, error)
	// Update an existing queue.
	UpdateQueue(context.Context, *UpdateQueueRequest) (*UpdateQueueResponse, error)
	// Delete a queue permanently.
	DeleteQueue(context.Context, *DeleteQueueRequest) (*DeleteQueueResponse, error)
	mustEmbedUnimplementedHoursServiceServer()
}

// UnimplementedHoursServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHoursServiceServer struct {
}

func (UnimplementedHoursServiceServer) CreateCourse(context.Context, *CreateCourseRequest) (*CreateCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCourse not implemented")
}
func (UnimplementedHoursServiceServer) UpdateCourse(context.Context, *UpdateCourseRequest) (*UpdateCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourse not implemented")
}
func (UnimplementedHoursServiceServer) DeleteCourse(context.Context, *DeleteCourseRequest) (*DeleteCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCourse not implemented")
}
func (UnimplementedHoursServiceServer) ArchiveCourse(context.Context, *ArchiveCourseRequest) (*ArchiveCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveCourse not implemented")
}
func (UnimplementedHoursServiceServer) ArchiveCoursesByTerm(context.Context, *ArchiveCoursesByTermRequest) (*ArchiveCoursesByTermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveCoursesByTerm not implemented")
}
func (UnimplementedHoursServiceServer) GetQueue(context.Context, *GetQueueRequest) (*GetQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueue not implemented")
}
func (UnimplementedHoursServiceServer) CreateQueue(context.Context, *CreateQueueRequest) (*CreateQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueue not implemented")
}
func (UnimplementedHoursServiceServer) UpdateQueue(context.Context, *UpdateQueueRequest) (*UpdateQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQueue not implemented")
}
func (UnimplementedHoursServiceServer) DeleteQueue(context.Context, *DeleteQueueRequest) (*DeleteQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQueue not implemented")
}
func (UnimplementedHoursServiceServer) mustEmbedUnimplementedHoursServiceServer() {}

// UnsafeHoursServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HoursServiceServer will
// result in compilation errors.
type UnsafeHoursServiceServer interface {
	mustEmbedUnimplementedHoursServiceServer()
}

func RegisterHoursServiceServer(s grpc.ServiceRegistrar, srv HoursServiceServer) {
	s.RegisterService(&HoursService_ServiceDesc, srv)
}

func _HoursService_CreateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoursServiceServer).CreateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hours.HoursService/CreateCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoursServiceServer).CreateCourse(ctx, req.(*CreateCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoursService_UpdateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoursServiceServer).UpdateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hours.HoursService/UpdateCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoursServiceServer).UpdateCourse(ctx, req.(*UpdateCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoursService_DeleteCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoursServiceServer).DeleteCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hours.HoursService/DeleteCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoursServiceServer).DeleteCourse(ctx, req.(*DeleteCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoursService_ArchiveCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoursServiceServer).ArchiveCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hours.HoursService/ArchiveCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoursServiceServer).ArchiveCourse(ctx, req.(*ArchiveCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoursService_ArchiveCoursesByTerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveCoursesByTermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoursServiceServer).ArchiveCoursesByTerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hours.HoursService/ArchiveCoursesByTerm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoursServiceServer).ArchiveCoursesByTerm(ctx, req.(*ArchiveCoursesByTermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoursService_GetQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoursServiceServer).GetQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hours.HoursService/GetQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoursServiceServer).GetQueue(ctx, req.(*GetQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoursService_CreateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoursServiceServer).CreateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hours.HoursService/CreateQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoursServiceServer).CreateQueue(ctx, req.(*CreateQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoursService_UpdateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoursServiceServer).UpdateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hours.HoursService/UpdateQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoursServiceServer).UpdateQueue(ctx, req.(*UpdateQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoursService_DeleteQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoursServiceServer).DeleteQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hours.HoursService/DeleteQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoursServiceServer).DeleteQueue(ctx, req.(*DeleteQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HoursService_ServiceDesc is the grpc.ServiceDesc for HoursService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HoursService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hours.HoursService",
	HandlerType: (*HoursServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCourse",
			Handler:    _HoursService_CreateCourse_Handler,
		},
		{
			MethodName: "UpdateCourse",
			Handler:    _HoursService_UpdateCourse_Handler,
		},
		{
			MethodName: "DeleteCourse",
			Handler:    _HoursService_DeleteCourse_Handler,
		},
		{
			MethodName: "ArchiveCourse",
			Handler:    _HoursService_ArchiveCourse_Handler,
		},
		{
			MethodName: "ArchiveCoursesByTerm",
			Handler:    _HoursService_ArchiveCoursesByTerm_Handler,
		},
		{
			MethodName: "GetQueue",
			Handler:    _HoursService_GetQueue_Handler,
		},
		{
			MethodName: "CreateQueue",
			Handler:    _HoursService_CreateQueue_Handler,
		},
		{
			MethodName: "UpdateQueue",
			Handler:    _HoursService_UpdateQueue_Handler,
		},
		{
			MethodName: "DeleteQueue",
			Handler:    _HoursService_DeleteQueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hours_service.proto",
}
